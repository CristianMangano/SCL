/*Scrivere un programma che prende stringhe come parametri di input, 
inserisce le stringhe in una lista ordinata e poinrichiama una funzione 
che elimina i duplicati e ritorna il puntatore alla lista così ripulita*/ 


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct List 
{ 
    char str[30]; 
    struct List *next; 
} List; 

List* inserisci (List *head, List *p)
{
	List *r = head, *q = head; /* predecessore e successore del nuovo elemento*/ 
	while ((q != NULL) && strcmp(q->str,p->str)<1)
	{
	       r = q;
	       q = q->next;
	}
	if (q == head) /*l'elemento si deve inserire in testa alla lista*/
	{
              p->next = head;
	       head = p;
	}
else
	   {
		if (q == NULL) /*l'elemento si deve inserire alla fine della lista*/
		{
		        r->next = p;
		        p->next = NULL;
		}
		else
		{
		         r->next = p;
		         p->next = q;
		}
	}
	return (head); /*per modificare il puntatore alla lista quando viene inserito il primo elemento*/
}

void stampa(List* head)
{
	List* temp = head;
	while (temp != NULL)
	{
		printf("\n%s", temp->str);
		temp = temp->next;
	}
}	 


List *Ripulisci(List *head)
{
    List *e, *p;
    if (head != NULL && head->next != NULL) /* verifica che la lista non è vuota o con 
				un solo elemento*/
     {
         e = head; 
         do 
          {
              if (!strcmp(e->str, e->next->str))   /* Se le stringhe sono uguali  elimina il prossimo	elemento. */ 
                {
                    p = e->next;
                    e->next = p->next;
                    free(p); 
                }
                else e = e->next; 
            }
            while (e->next != NULL); 
        } 
        return head; 
}


int main(int argc, char **argv)
{
	List *p;      
	List *head = NULL;
    int i;
    
    for (i=1; i<argc; i++)
    {
         p= (List *) malloc(sizeof(List));
        if (p == NULL)
            printf("\n\aImpossibile allocare nuovo spazio");
        else
        {
            strcpy(p->str, argv[i]);
            head = inserisci (head,p);
        }
    }
    stampa(head);
    printf("\n ripulisco...\n");
    head=Ripulisci(head);
    stampa(head);
 	return 0;
}
